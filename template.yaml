AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  SurveysApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: SurveysApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /v1/response:
            put:
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutResponse.Arn}/invocations
              responses: {}
            get:
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveResponses.Arn}/invocations
              responses: {}
          /v1/send-consent-email:
            post:
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendConsentEmail.Arn}/invocations
              responses: {}
          /v1/raise-error:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RaiseError.Arn}/invocations
              responses: {}
          /v1/user-interview-tasks/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserInterviewTask.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  RetrieveResponses:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RetrieveResponses
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RetrieveResponses
      CodeUri: src
      Handler: endpoints.retrieve_responses_api
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Responses
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          TABLE_NAME: !Ref Responses
          TABLE_ARN: !GetAtt Responses.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        SurveysApiGETv1response:
          Type: Api
          Properties:
            Path: /v1/response
            Method: GET
            RestApiId: !Ref SurveysApi
  Responses:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-Responses
  PutResponse:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PutResponse
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: PutResponse
      CodeUri: src
      Handler: endpoints.put_response_api
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Responses
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        SurveysApiPUTv1response:
          Type: Api
          Properties:
            Path: /v1/response
            Method: PUT
            RestApiId: !Ref SurveysApi
      Environment:
        Variables:
          TABLE_NAME: !Ref Responses
          TABLE_ARN: !GetAtt Responses.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
  SendConsentEmail:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SendConsentEmail
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: SendConsentEmail
      CodeUri: src
      Handler: endpoints.send_consent_email_api
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ConsentData
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        SurveysApiPOSTv1sendconsentemail:
          Type: Api
          Properties:
            Path: /v1/send-consent-email
            Method: POST
            RestApiId: !Ref SurveysApi
      Environment:
        Variables:
          TABLE_NAME: !Ref ConsentData
          TABLE_ARN: !GetAtt ConsentData.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
  ConsentData:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: project_task_id
          AttributeType: S
        - AttributeName: consent_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: project_task_id
          KeyType: HASH
        - AttributeName: consent_id
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-ConsentData
  RaiseError:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RaiseError
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RaiseError
      CodeUri: src
      Handler: endpoints.raise_error_api
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        SurveysApiPOSTv1raiseerror:
          Type: Api
          Properties:
            Path: /v1/raise-error
            Method: POST
            RestApiId: !Ref SurveysApi
  TaskResponses:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: response_id
          AttributeType: S
        - AttributeName: event_time
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: response_id
          KeyType: HASH
        - AttributeName: event_time
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-TaskResponses
  GetUserInterviewTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetUserInterviewTask
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetUserInterviewTask
      CodeUri: src
      Handler: endpoints.get_user_interview_task_api
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskResponses
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewTasks
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskResponses
          TABLE_ARN: !GetAtt TaskResponses.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TABLE_NAME_2: !Ref InterviewTasks
          TABLE_ARN_2: !GetAtt InterviewTasks.Arn
      Events:
        SurveysApiGETv1userinterviewtasksid:
          Type: Api
          Properties:
            Path: /v1/user-interview-tasks/{id}
            Method: GET
            RestApiId: !Ref SurveysApi
  InterviewTasks:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: project_task_id
          AttributeType: S
        - AttributeName: interview_task_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: project_task_id
          KeyType: HASH
        - AttributeName: interview_task_id
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-InterviewTasks
  PutTaskResponse:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PutTaskResponse
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: PutTaskResponse
      CodeUri: src
      Handler: endpoints.put_task_response
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskResponses
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewTasks
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskResponses
          TABLE_ARN: !GetAtt TaskResponses.Arn
          TABLE_NAME_2: !Ref InterviewTasks
          TABLE_ARN_2: !GetAtt InterviewTasks.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        EventRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.health
            EventBusName: !Ref EnvConfigeventbridgethiscoveryeventbusAsString
          Metadata:
            StackeryName: PutTaskResponse
  PutUserInterviewTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PutUserInterviewTask
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: PutUserInterviewTask
      CodeUri: src
      Handler: endpoints.put_user_interview_task
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskResponses
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskResponses
          TABLE_ARN: !GetAtt TaskResponses.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        EventRule2:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.health
            EventBusName: !Ref EnvConfigeventbridgethiscoveryeventbusAsString
          Metadata:
            StackeryName: PutUserInterviewTask
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  EnvConfiglambdamemorysizeAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/memory-size
  EnvConfiglambdatimeoutAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/timeout
  EnvConfigeventbridgethiscoveryeventbusAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/eventbridge/thiscovery-event-bus
Metadata:
  EnvConfigParameters:
    EnvConfiglambdamemorysizeAsString: lambda.memory-size
    EnvConfiglambdatimeoutAsString: lambda.timeout
    EnvConfigeventbridgethiscoveryeventbusAsString: eventbridge.thiscovery-event-bus